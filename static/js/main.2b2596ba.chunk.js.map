{"version":3,"sources":["translate/constants.ts","translate/request.ts","translate/translate.ts","translate/index.ts","components/TextField.tsx","components/LanguageSelector.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TRANSLATE_API_KEY","TRANSLATE_URL","translate","params","a","fetch","encodeURI","C","text","lang","then","response","json","status","code","message","request","result","Wrapper","styled","div","TextField","props","Form","Control","as","rows","placeholder","onChange","event","setText","target","value","LanguageSelector","Tabs","id","activeKey","onSelect","setLang","Tab","eventKey","title","Container","Topic","LanguageContainer","App","useState","translation","setTranslation","outlang","setOutlang","useEffect","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2b2596ba.chunk.js","sourcesContent":["export const TRANSLATE_API_KEY = 'trnsl.1.1.20200407T132632Z.19b1f0ccbc9d05c9.e82289b798de7ce9ec5d52e568274deb2ba54216'\nexport const TRANSLATE_URL = 'https://translate.yandex.net/api/v1.5/tr.json/translate'\n","// const fetch = require(\"node-fetch\");\nimport * as T from './types'\nimport * as C from './constants'\n\nexport async function translate(params: T.ITranslateParams): Promise<T.ITranslateRequestAnswer> {\n    try {\n        let response = await fetch(encodeURI(`${C.TRANSLATE_URL}?key=${C.TRANSLATE_API_KEY}&text=${params.text}&lang=${params.lang}`))\n        .then((response: { json: () => any; }) => response.json());\n        return {\n            text: response.text,\n            status: response.code,\n        };\n    } catch (err) {\n        return {\n            text: '',\n            status: err.message,\n        }\n    }\n}\n","import * as T from './types'\nimport * as request from './request'\n\nexport async function translate(params: T.ITranslateParams): Promise<string> {\n    let result = await request.translate(params);\n    if (result.status === 200) {\n        return result.text;\n    }\n    return `Error ${result.status}`;\n}\n","export * from './translate';\nexport * from './decorator';\nexport * from './types';\n","import React, { ReactHTMLElement } from 'react';\nimport styled, { StyledComponent } from '@emotion/styled';\nimport { Form } from 'react-bootstrap';\nimport * as T from '../types/Types';\n\nconst Wrapper: StyledComponent<any, ReactHTMLElement<HTMLDivElement>, HTMLDivElement> = styled.div`\n    display: flex;\n    margin: 10px;\n    width: -webkit-fill-available;\n`;\n\nconst TextField: React.FunctionComponent<T.IInputTextProps> = props => {\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        props.setText(event.target.value);\n    };\n    return <Wrapper>\n        <Form.Control as=\"textarea\" rows={5} placeholder=\"Введите текст\" onChange={onChange} value={props.text}/>\n    </Wrapper>\n}\n\nexport default TextField;\n","import React from 'react';\nimport { Tabs, Tab} from 'react-bootstrap';\nimport * as T from '../types/Types';\n\nconst LanguageSelector: React.FunctionComponent<T.IInputLanguage> = props => {\n    return (\n        <Tabs\n          id=\"controlled-tab-example\"\n          activeKey={props.lang}\n          onSelect={(lang: string) => {props.setLang(lang)}}\n        >\n          <Tab eventKey=\"ru\" title=\"Русский\">\n          </Tab>\n          <Tab eventKey=\"en\" title=\"English\">\n          </Tab>\n        </Tabs>\n    );\n}\n\nexport default LanguageSelector;","import { translate } from './translate';\nimport React, { ReactHTMLElement, useEffect, useState} from 'react';\nimport styled, { StyledComponent } from '@emotion/styled';\nimport TextField from './components/TextField';\nimport LanguageSelector from './components/LanguageSelector';\nimport './App.css';\n\nconst Container: StyledComponent<any, ReactHTMLElement<HTMLDivElement>, HTMLDivElement> = styled.div`\n    display: flex;\n    flex-direction: row;\n    padding: 10px;\n    justify-content: center;\n`;\n\nconst Topic: StyledComponent<any, ReactHTMLElement<HTMLDivElement>, HTMLDivElement> = styled.div`\n    display: flex;\n    align-self: center;\n    font: normal 60px monospace;\n    color: lightgrey;\n    justify-content: center;\n    padding: 20px;\n    padding-left: 50px;\n    padding-right: 50px;\n`;\n\nconst LanguageContainer: StyledComponent<any, ReactHTMLElement<HTMLDivElement>, HTMLDivElement> = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: -webkit-fill-available;\n`;\n\nfunction App() {\n    const [text, setText] = useState('');\n    const [translation, setTranslation] = useState('');\n    const [lang, setLang] = useState('en');\n    const [outlang, setOutlang] = useState('ru');\n\n    useEffect(() => {\n        if (text) {\n            translate({\n                lang: outlang,\n                text: text,\n            })\n            .then((result) => {\n                setTranslation(result);\n            })\n        }\n    }, [text, outlang, lang]);\n\n    return (\n        <div>\n            <Topic>TechoTrack Translate</Topic>\n            <Container>\n                <LanguageContainer>\n                    <LanguageSelector lang={lang} setLang={setLang}/>\n                    <TextField text={text} setText={setText}/>\n                </LanguageContainer>\n                <LanguageContainer>\n                    <LanguageSelector lang={outlang} setLang={setOutlang}/>\n                    <TextField text={translation} setText={setTranslation}/>\n                </LanguageContainer>\n            </Container>\n        </div>\n    );\n\n  // return (\n  //   <div className=\"App\">\n  //     <header className=\"App-header\">\n  //       <img src={logo} className=\"App-logo\" alt=\"logo\" />\n  //       <p>\n  //         Edit <code>src/App.tsx</code> and save to reload.\n  //       </p>\n  //       <a\n  //         className=\"App-link\"\n  //         href=\"https://reactjs.org\"\n  //         target=\"_blank\"\n  //         rel=\"noopener noreferrer\"\n  //       >\n  //         Learn React\n  //       </a>\n  //     </header>\n  //   </div>\n  // );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}